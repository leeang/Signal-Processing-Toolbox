clear;

WORD_NUM = 27;

% load('probabilities-google-us.mat');
load('probability.mat');

DSP{1} = [-447.153700 -544.260850 -653.114500 -595.499000 -507.558300 -607.535450 -495.318150 -620.141150 -524.092750 -491.476800 -514.517050 -521.523200 -589.367500 -494.917350 -664.670950 -643.532150 -521.657400 -694.483400 -537.566150 -466.712500 -624.258250 -541.504750 -658.994800 -493.384050 -685.696800 -534.170250 -984.961700];
clocks{1} = 50880440;

DSP{2} = [-540.658400 -401.179750 -494.739050 -633.688600 -513.819600 -452.838000 -485.126850 -510.754150 -480.670550 -526.261900 -465.023300 -642.693550 -512.214000 -466.922750 -416.462275 -456.317450 -466.487250 -449.172150 -493.581700 -508.344100 -468.432900 -617.904500 -777.703050 -460.116100 -487.407050 -514.278500 -820.539800];
clocks{2} = 47675900;

DSP{3} = [-592.541200 -475.019400 -372.568875 -704.544350 -496.843850 -483.832850 -481.548800 -449.765550 -469.930350 -524.237900 -473.423650 -590.889350 -449.347300 -475.685600 -468.839250 -489.901450 -431.889150 -496.311850 -408.387500 -405.391325 -502.137700 -612.538400 -740.099600 -477.474750 -499.465550 -466.935600 -706.751300];
clocks{3} = 50877256;

DSP{4} = [-413.772725 -435.559800 -539.443500 -337.097600 -451.182300 -485.676650 -432.579400 -492.434800 -461.998100 -509.001150 -463.388450 -451.918650 -449.264200 -385.316950 -528.080950 -522.865400 -528.910450 -584.252400 -472.680250 -428.943250 -438.047000 -436.401450 -486.819300 -414.870425 -499.270100 -420.745350 -786.748400];
clocks{4} = 49797080;

DSP{5} = [-410.127750 -502.364800 -468.332700 -525.799400 -321.142400 -514.446000 -420.193100 -477.549450 -337.370025 -456.438250 -448.348150 -442.062450 -426.113750 -442.737050 -558.224050 -607.104250 -538.144900 -610.085350 -452.007150 -419.222950 -481.427650 -470.486600 -488.654250 -445.723350 -502.053450 -427.613450 -520.641900];
clocks{5} = 48752480;

DSP{6} = [-363.355525 -340.638375 -332.767650 -488.702400 -311.753425 -255.313900 -334.872800 -288.507300 -337.026800 -339.324225 -340.538625 -407.323050 -315.656000 -306.603825 -321.022150 -283.566650 -321.463375 -316.312550 -328.775025 -360.931825 -313.558725 -388.885925 -446.166650 -336.351675 -268.491475 -399.489050 -641.860800];
clocks{6} = 42396228;

DSP{7} = [-489.927650 -449.747600 -513.693800 -612.184250 -425.737800 -478.594550 -410.402825 -494.641000 -441.350550 -403.596000 -444.880800 -545.043650 -413.454525 -521.969750 -505.047600 -503.893450 -433.058950 -547.585650 -445.906500 -454.657550 -497.910100 -560.417850 -695.370100 -435.120850 -540.236250 -464.502400 -690.212500];
clocks{7} = 54069000;

DSP{9} = [-571.466850 -570.240400 -556.834800 -682.138350 -497.436200 -564.944650 -493.532250 -563.162000 -462.551700 -486.563250 -532.912300 -593.090400 -492.560350 -592.190850 -626.320150 -660.496350 -518.782600 -646.652300 -499.309900 -494.113750 -575.653150 -632.955750 -726.367250 -500.311200 -622.559200 -526.121950 -771.770400];
clocks{9} = 55126704;

DSP{10} = [-496.537100 -483.339350 -533.686500 -586.765950 -416.478475 -484.056950 -441.515350 -485.853450 -450.940400 -396.077700 -444.880300 -564.040900 -485.021900 -529.439700 -528.226500 -508.234750 -497.752950 -518.387950 -466.221400 -470.940100 -486.875650 -508.221800 -633.399850 -431.102400 -566.139450 -518.237000 -875.827600];
clocks{10} = 51942972;

DSP{11} = [-574.978950 -674.279900 -683.687400 -747.523950 -594.612450 -717.191850 -539.406600 -724.803900 -607.089550 -634.715350 -560.327500 -636.675300 -661.636450 -651.137800 -732.424200 -716.980350 -646.064400 -793.359200 -646.131950 -615.954750 -694.031300 -653.591200 -797.642800 -621.447100 -712.097350 -665.291750 -1063.611875];
clocks{11} = 64712212;

DSP{12} = [-393.145600 -523.920700 -605.852300 -512.948550 -425.364700 -584.821800 -450.908800 -523.962900 -491.867900 -504.120400 -437.492700 -378.973600 -531.228650 -431.613750 -636.693200 -609.703600 -487.421200 -653.321050 -520.337950 -459.470650 -462.464050 -451.668650 -506.415700 -412.471700 -617.459800 -443.774850 -1112.957500];
clocks{12} = 48754192;

DSP{13} = [-861.551000 -803.354550 -837.516600 -1092.006000 -818.126950 -810.730900 -872.079500 -805.849550 -797.831500 -914.757100 -816.933850 -979.262300 -728.073950 -735.502550 -669.356950 -731.354850 -696.319400 -707.070600 -701.302100 -750.375050 -853.413400 -921.913100 -1056.085500 -855.075300 -874.574800 -900.549100 -1469.232625];
clocks{13} = 64707172;

DSP{14} = [-866.228900 -843.812600 -832.569900 -1089.008875 -804.643450 -790.889650 -824.885400 -803.484150 -770.448600 -915.162300 -793.069200 -960.211400 -725.579850 -679.987050 -662.784100 -726.681800 -717.347100 -721.542200 -740.058300 -720.704750 -859.453400 -894.590100 -1043.725688 -843.947000 -850.862200 -846.926000 -1288.372125];
clocks{14} = 64711052;

DSP{15} = [-796.980850 -711.393500 -721.499900 -948.779800 -695.738150 -658.611900 -744.834000 -645.936150 -684.779400 -751.536200 -682.439200 -886.440700 -630.532100 -611.078450 -574.615000 -614.540600 -584.707900 -572.036600 -572.518300 -626.646650 -721.194100 -814.505900 -970.297900 -747.900150 -723.554300 -761.518700 -1186.195500];
clocks{15} = 57283512;

DSP{16} = [-1140.869625 -1077.089375 -1147.357250 -1259.010000 -1138.729750 -1010.767813 -1114.250125 -1056.772750 -1123.094500 -1248.482625 -1198.767875 -1269.299125 -1004.816688 -963.702800 -954.430100 -885.207000 -971.772300 -902.792200 -1030.500500 -1084.988375 -1075.501625 -1204.028625 -1365.929625 -1066.294500 -1173.677125 -1406.521500 -2126.636250];
clocks{16} = 72205136;

DSP{17} = [-1224.127000 -1128.050875 -1124.905750 -1479.716375 -1136.531250 -1050.713625 -1024.705938 -1110.686000 -1067.729250 -1137.176750 -1107.708375 -1229.283625 -1058.222375 -1084.196000 -1065.295875 -1035.444063 -981.868300 -1090.852375 -1076.040250 -1056.877125 -1186.360500 -1271.223250 -1505.005500 -1041.483625 -1150.138625 -1221.082375 -2158.913750];
clocks{17} = 80651532;

DSP{19} = [-1114.880125 -1059.151625 -1080.964125 -1421.916250 -1000.149000 -975.046500 -1028.789188 -980.742600 -978.773300 -1050.280500 -1000.188188 -1200.888875 -961.586100 -966.865000 -928.697700 -949.915600 -847.961600 -948.061500 -876.551000 -914.010000 -1087.256000 -1133.942875 -1298.099375 -1012.823125 -1114.544000 -1066.326875 -1837.916875];
clocks{19} = 73230956;

DSP{20} = [-600.309900 -591.743400 -507.498800 -781.194700 -523.254600 -525.015600 -539.874500 -499.289250 -511.522400 -539.277300 -510.029250 -687.844900 -492.736650 -490.097350 -501.800250 -504.037900 -445.215200 -501.276900 -454.444900 -416.823975 -579.365250 -635.233050 -758.056250 -540.157050 -557.760250 -550.418700 -769.775650];
clocks{20} = 53009984;

DSP{21} = [-787.095950 -648.180200 -718.467300 -801.544350 -719.909200 -697.559400 -665.013900 -720.813800 -683.704450 -810.519700 -690.843150 -750.358100 -679.758500 -760.419450 -772.247450 -728.464050 -857.233500 -870.197400 -756.442000 -733.522900 -528.712350 -836.134050 -1045.300438 -696.999400 -804.098700 -687.697150 -1294.834750];
clocks{21} = 59390960;

DSP{23} = [-231.131050 -353.402500 -359.517700 -365.355875 -212.222250 -417.954525 -297.304100 -381.421325 -214.341850 -379.516425 -307.928475 -213.921875 -342.559725 -294.217950 -453.752250 -454.552050 -426.485450 -506.553100 -334.221000 -304.096100 -287.332700 -280.543525 -260.206700 -266.780950 -366.380500 -224.968075 -225.486850];
clocks{23} = 45554228;

DSP{24} = [-803.976500 -760.521000 -879.767400 -890.514300 -784.324100 -818.231150 -687.597950 -858.331900 -736.699700 -709.306650 -785.716350 -688.105600 -862.355500 -848.912800 -889.627400 -856.714500 -763.484150 -980.846100 -874.010300 -701.618150 -757.447950 -790.048950 -929.599900 -574.856950 -999.032200 -958.838000 -1795.420625];
clocks{24} = 58312588;

DSP{25} = [-681.634700 -666.817750 -659.947750 -840.928300 -637.804250 -571.585950 -680.816450 -593.793800 -670.653100 -678.700700 -750.607600 -716.549000 -612.768800 -618.348100 -661.743850 -561.727050 -610.056900 -642.346350 -683.792650 -655.090650 -578.183700 -731.450950 -847.501100 -585.164300 -540.220650 -987.205700 -1291.347000];
clocks{25} = 54105904;

DSP{27} = [-1198.234375 -1307.058375 -1315.438875 -1471.382500 -1089.824625 -1245.786500 -1058.791625 -1184.097750 -1096.188500 -1189.008875 -1067.298375 -1163.312000 -1208.133875 -1236.706250 -1310.088375 -1331.685000 -1141.861625 -1388.703000 -1173.385375 -1107.150250 -1274.887125 -1202.097125 -1423.893625 -1102.289500 -1440.639375 -1173.124125 -2128.391000];
clocks{27} = 87031184;

indices = ~ cellfun('isempty', clocks);
MATLAB = MATLAB(indices);
DSP = DSP(indices);
clocks = clocks(indices);

len = length(clocks);

fig = figure;
fig.Units = 'inches';
pos = fig.Position;
fig.PaperSize = [pos(3) pos(4)];
fig.PaperPositionMode = 'Auto';

for dataset_index = 1:len
	if dataset_index <= 7
		plot((DSP{dataset_index}-MATLAB{dataset_index}) ./ MATLAB{dataset_index});
	elseif dataset_index <= 14
		plot((DSP{dataset_index}-MATLAB{dataset_index}) ./ MATLAB{dataset_index}, '--');
	else
		plot((DSP{dataset_index}-MATLAB{dataset_index}) ./ MATLAB{dataset_index}, '-.');
	end
	hold on;
	legend_string{dataset_index} = num2str(dataset_index);
end
legend(legend_string, 'Location', 'eastoutside');
title(['relative error of ' num2str(len) ' datasets'], 'interpreter', 'latex');
xlabel(['word 1 to word 27'], 'interpreter', 'latex');
ylabel('relative error', 'interpreter', 'latex');
ax = gca;
ax.XTick = linspace(0, 27, 10);
xlim([0 28]);
print('relative_error', '-dpdf');

dataset_error_max = 0;

fig = figure;
fig.Units = 'inches';
pos = fig.Position;
fig.PaperSize = [pos(3) pos(4)];
fig.PaperPositionMode = 'Auto';

for dataset_index = 1:len
	relative_error = (DSP{dataset_index}-MATLAB{dataset_index}) ./ MATLAB{dataset_index};
	dataset_error = sqrt(sum(relative_error.^2) / WORD_NUM);
	if dataset_index <= 7
		stem(dataset_index, dataset_error);
	elseif dataset_index <= 14
		stem(dataset_index, dataset_error, '--');
	else
		stem(dataset_index, dataset_error, '-.');
	end
	hold on;

	if dataset_error > dataset_error_max
		dataset_error_max = dataset_error;
		index_max = dataset_index;
	end
end
title(['root mean square error of ' num2str(len) ' datasets'], 'interpreter', 'latex');
xlabel(['dataset 1 to dataset ' num2str(len)], 'interpreter', 'latex');
ylabel('mean square error', 'interpreter', 'latex');
xlim([0 len+1]);
print('root_mean_square_error', '-dpdf');

fig = figure;
fig.Units = 'inches';
pos = fig.Position;
fig.PaperSize = [pos(3) pos(4)];
fig.PaperPositionMode = 'Auto';

plot(MATLAB{index_max}, 'o');
hold on;
plot(DSP{index_max}, 'x');
title(['probabilities of 27 words (dataset ' num2str(index_max) ')'], 'interpreter', 'latex');
xlabel(['word 1 to word 27'], 'interpreter', 'latex');
ylabel('probabilities (natural-log scale)', 'interpreter', 'latex');
grid on;
ax = gca;
ax.XTick = linspace(0, 27, 10);
xlim([0 28]);

for dataset_index = 1:len
	clock_vector(dataset_index) = clocks{dataset_index};
end
time = clock_vector / 6E8 * 1E3;
average_time = mean(time);
print('word_probabilities', '-dpdf');

fig = figure;
fig.Units = 'inches';
pos = fig.Position;
fig.PaperSize = [pos(3) pos(4)];
fig.PaperPositionMode = 'Auto';

subplot(2, 1, 1);
plot(clock_vector);
title('clocks to process each dataset ($6 \times 10^8$ clocks per second)', 'interpreter', 'latex');
xlabel(['dataset 1 to dataset ' num2str(len)], 'interpreter', 'latex');
ylabel('clocks', 'interpreter', 'latex');
xlim([0 len+1]);

subplot(2, 1, 2);
plot(time);
hold on;
plot([0 len+1], [average_time average_time], '-.');
title(['average processing time = ' num2str(average_time) ' ms'], 'interpreter', 'latex');
xlabel(['dataset 1 to dataset ' num2str(len)], 'interpreter', 'latex');
ylabel('time (ms)', 'interpreter', 'latex');
legend('processing time', 'average time', 'Location', 'northwest');
xlim([0 len+1]);
print('processing_time', '-dpdf');
